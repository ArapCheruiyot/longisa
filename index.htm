<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Drive File Uploader</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #121212; /* Dark mode */
            color: white;
        }
        h1 {
            font-size: 2rem;
            margin-bottom: 20px;
        }
        .button {
            background-color: #4CAF50;
            color: white;
            padding: 12px 20px;
            margin: 10px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
        }
        .button:hover {
            background-color: #45a049;
        }
        .button-danger {
            background-color: #f44336;
        }
        .button-danger:hover {
            background-color: #da190b;
        }
        #uploadSection, #folderSection {
            margin-top: 20px;
            text-align: center;
        }
        #progressBarWrapper {
            width: 100%;
            height: 25px;
            background-color: #333;
            margin-top: 20px;
            border-radius: 5px;
        }
        #progressBar {
            height: 100%;
            background-color: #4CAF50;
            width: 0%;
            border-radius: 5px;
        }
        #dragDropZone {
            border: 2px dashed #888;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            cursor: pointer;
        }
        #dragDropZone.drag-over {
            border-color: #4CAF50;
        }
        .file-name {
            margin-top: 10px;
            font-size: 14px;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Google Drive File Uploader</h1>
    <button id="authorize_button" class="button hidden" onclick="handleAuthClick()">Authorize</button>
    <div id="uploadSection">
        <div id="dragDropZone">Drag & Drop Files Here or Click to Select</div>
        <input type="file" id="file_input" class="hidden" multiple>
        <div id="fileTypeFilter">
            <label for="fileType">Allowed File Types:</label>
            <input type="text" id="fileType" placeholder="e.g., .jpg, .png, .pdf">
        </div>
        <button class="button" onclick="uploadFiles()">Upload Files</button>
        <button id="cancel_button" class="button-danger hidden" onclick="cancelFile()">Cancel</button>
        <div id="progressBarWrapper" class="hidden">
            <div id="progressBar"></div>
        </div>
        <div id="fileList"></div>
    </div>
    <div id="folderSection">
        <button class="button" onclick="createFolder()">Create Folder</button>
    </div>

    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>

    <script>
        // Constants and variables
        const CLIENT_ID = 'YOUR_CLIENT_ID';
        const API_KEY = 'YOUR_API_KEY';
        const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';
        const SCOPES = 'https://www.googleapis.com/auth/drive.file';
        let tokenClient;
        let gapiInited = false;
        let gisInited = false;
        let selectedFiles = [];

        // Initialize Google API
        function gapiLoaded() {
            gapi.load('client', initializeGapiClient);
        }

        async function initializeGapiClient() {
            await gapi.client.init({
                apiKey: API_KEY,
                discoveryDocs: [DISCOVERY_DOC],
            });
            gapiInited = true;
            maybeEnableButtons();
        }

        function gisLoaded() {
            tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: '', 
            });
            gisInited = true;
            maybeEnableButtons();
        }

        function maybeEnableButtons() {
            if (gapiInited && gisInited) {
                document.getElementById('authorize_button').classList.remove('hidden');
            }
        }

        function handleAuthClick() {
            tokenClient.callback = async (resp) => {
                if (resp.error !== undefined) {
                    throw (resp);
                }
                document.getElementById('authorize_button').classList.add('hidden');
                document.getElementById('uploadSection').classList.remove('hidden');
            };
            if (gapi.client.getToken() === null) {
                tokenClient.requestAccessToken({ prompt: 'consent' });
            } else {
                tokenClient.requestAccessToken({ prompt: '' });
            }
        }

        // Drag and drop handling
        const dragDropZone = document.getElementById('dragDropZone');
        dragDropZone.addEventListener('click', () => document.getElementById('file_input').click());
        dragDropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dragDropZone.classList.add('drag-over');
        });
        dragDropZone.addEventListener('dragleave', () => dragDropZone.classList.remove('drag-over'));
        dragDropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dragDropZone.classList.remove('drag-over');
            handleFileSelection(e.dataTransfer.files);
        });

        document.getElementById('file_input').addEventListener('change', (e) => {
            handleFileSelection(e.target.files);
        });

        function handleFileSelection(files) {
            const fileTypeFilter = document.getElementById('fileType').value.split(',').map(type => type.trim());
            selectedFiles = Array.from(files).filter(file =>
                fileTypeFilter.length === 0 || fileTypeFilter.includes(file.type)
            );
            document.getElementById('fileList').innerHTML = selectedFiles.map(file => 
                `<div class="file-name">${file.name}</div>`).join('');
            document.getElementById('cancel_button').classList.remove('hidden');
        }

        function cancelFile() {
            selectedFiles = [];
            document.getElementById('fileList').innerHTML = '';
            document.getElementById('cancel_button').classList.add('hidden');
        }

        async function uploadFiles() {
            // Add your upload logic here (similar to the original)
        }

        async function createFolder() {
            const folderName = prompt('Enter folder name:');
            if (!folderName) return;

            const accessToken = gapi.auth.getToken().access_token;
            const metadata = {
                name: folderName,
                mimeType: 'application/vnd.google-apps.folder',
            };

            try {
                const response = await fetch('https://www.googleapis.com/drive/v3/files', {
                    method: 'POST',
                    headers: new Headers({
                        'Authorization': 'Bearer ' + accessToken,
                        'Content-Type': 'application/json',
                    }),
                    body: JSON.stringify(metadata),
                });
                const result = await response.json();
                alert(`Folder "${folderName}" created successfully.`);
            } catch (error) {
                console.error('Error creating folder:', error);
                alert('An error occurred while creating the folder.');
            }
        }
    </script>
</body>
</html>
